FROM dockerhub.gatineau.credil.org/minerva/minerva_builder:v202304 as builder

ADD ./docker/Gemfile /app/fountain/Gemfile
ADD ./docker/Gemfile.lock /app/fountain/Gemfile.lock

WORKDIR /app/fountain
RUN git config --global pull.ff only
RUN bundle config setup system true
RUN bundle config set --local deployment false
RUN bundle install --gemfile=/app/fountain/Gemfile && \
    bundle check

# use istari, because it has an IPv4, which docker, stupidly, needs
#RUN echo "deb http://istari.sandelman.ca:3142/deb.debian.org/debian bullseye main contrib non-free" >/etc/apt/sources.list.d/cacher.list

# install items for use in debugging
RUN apt-get update && apt-get  install -y strace busybox

# clean up just to be sure.
RUN rm -f /app/fountain/tmp/pids/server.pid && \
    rm -f /app/fountain/config/{config,database,secret}.yml && \
    rm -f /app/fountain/config/initializers/acme.rb && \
    rm -f /app/fountain/config/environments/production.rb

# debugging
RUN apt-get -y install strace
# RUN ls -l /usr/lib/x86_64-linux-gnu/libunwind*so*

# RUN ls -l /usr/local/bundle/gems/ffi-1.14.2/lib

ENV GEM_HOME="/usr/local/bundle"
WORKDIR /app/fountain
#RUN ["bundle","show" ]

FROM dockerhub.gatineau.credil.org/minerva/distroless-ruby:2.7.6-dnsutils

# includes /app/minerva, where the gems were installed.
COPY --from=builder /app /app
COPY --from=builder /usr/local/bundle /usr/local/bundle
COPY --from=builder /usr/local/lib/ruby /usr/local/lib/ruby
COPY --from=builder /usr/share/zoneinfo/UTC /etc/localtime
COPY --from=builder /bin/sash     /bin/sash
COPY --from=builder /usr/bin/env  /usr/bin/env
COPY --from=builder /bin/busybox  /bin/busybox
COPY --from=builder /usr/bin/strace  /usr/bin/strace
COPY --from=builder /usr/lib/x86_64-linux-gnu/libpq.so* \
                    /usr/lib/x86_64-linux-gnu/libffi.so* \
                    /lib/x86_64-linux-gnu/libcrypt.so* \
                    /lib/x86_64-linux-gnu/libidn.so*  \
                    /usr/lib/x86_64-linux-gnu/libidn2.so*  \
                    /usr/lib/x86_64-linux-gnu/libunistring.so* \
                    /usr/lib/x86_64-linux-gnu/libunwind*so* \
                    /usr/lib/x86_64-linux-gnu/libsqlite3.so* /usr/lib/x86_64-linux-gnu/


ENV PATH="/usr/local/bundle/bin:${PATH}"
ENV GEM_HOME="/usr/local/bundle"
ENV RAILS_ENV=production
WORKDIR /app/fountain

# annoying to copy just what we need, so clean up afterwards
COPY . /app/fountain
RUN ["busybox","rm", "-rf", "/app/fountain/run"]
RUN ["busybox","rm", "-rf", "/app/fountain/spec"]
RUN ["busybox","rm", "-rf", "/app/fountain/tmp"]
RUN ["busybox","rm", "-rf", "/app/fountain/windex_cli"]
RUN ["busybox","rm", "-rf", "/app/fountain/.git"]
RUN ["busybox","sh", "-c", "busybox find /app -type d -name .git | busybox xargs busybox rm -rf"]
RUN ["busybox","sh", "-c", "busybox find /app -type f -name '*~' | busybox xargs busybox rm"]

ADD ./docker/Gemfile /app/fountain/Gemfile
ADD ./docker/Gemfile.lock /app/fountain/Gemfile.lock

#RUN ["busybox", "ls", "-l", "/usr/local/bundle/gems/ffi-1.14.2/lib"]

RUN ["bundle","show" ]
RUN ["bundle","exec","rake","-T" ]
RUN ["bundle","exec","rake","assets:precompile" ]

EXPOSE 8443

CMD ["bundle", "exec", "thin", "start", "--ssl",      \
    "--address", "0.0.0.0", "--port", "8443",                         \
    "--ssl-cert-file", "/app/certificates/server_prime256v1.crt",\
    "--ssl-key-file",  "/app/certificates/server_prime256v1.key" ]

