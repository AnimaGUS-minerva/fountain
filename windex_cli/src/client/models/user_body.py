# coding: utf-8

"""
    CIRA SHG Windex API

    CIRALabs SecureHomeGateway Windex API: between smartphone and router  # noqa: E501

    OpenAPI spec version: 1.0.0-current
    Contact: securehomegateway@cira.ca
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserBody(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'admin': 'bool',
        'enabled': 'bool',
        'prospective': 'bool',
        'public_key': 'str',
        'previous_public_key': 'str',
        'last_login': 'datetime',
        'first_login': 'datetime',
        'last_login_ip': 'OneOfstringstring',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'admin': 'admin',
        'enabled': 'enabled',
        'prospective': 'prospective',
        'public_key': 'public_key',
        'previous_public_key': 'previous_public_key',
        'last_login': 'last_login',
        'first_login': 'first_login',
        'last_login_ip': 'last_login_ip',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, name=None, admin=False, enabled=False, prospective=True, public_key=None, previous_public_key=None, last_login=None, first_login=None, last_login_ip=None, created_at=None, updated_at=None):  # noqa: E501
        """UserBody - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._admin = None
        self._enabled = None
        self._prospective = None
        self._public_key = None
        self._previous_public_key = None
        self._last_login = None
        self._first_login = None
        self._last_login_ip = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if admin is not None:
            self.admin = admin
        if enabled is not None:
            self.enabled = enabled
        if prospective is not None:
            self.prospective = prospective
        if public_key is not None:
            self.public_key = public_key
        if previous_public_key is not None:
            self.previous_public_key = previous_public_key
        if last_login is not None:
            self.last_login = last_login
        if first_login is not None:
            self.first_login = first_login
        if last_login_ip is not None:
            self.last_login_ip = last_login_ip
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this UserBody.  # noqa: E501

        Username  # noqa: E501

        :return: The name of this UserBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserBody.

        Username  # noqa: E501

        :param name: The name of this UserBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def admin(self):
        """Gets the admin of this UserBody.  # noqa: E501

        Whether user has admin rights  # noqa: E501

        :return: The admin of this UserBody.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this UserBody.

        Whether user has admin rights  # noqa: E501

        :param admin: The admin of this UserBody.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def enabled(self):
        """Gets the enabled of this UserBody.  # noqa: E501

        Whether user is enabled  # noqa: E501

        :return: The enabled of this UserBody.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserBody.

        Whether user is enabled  # noqa: E501

        :param enabled: The enabled of this UserBody.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def prospective(self):
        """Gets the prospective of this UserBody.  # noqa: E501


        :return: The prospective of this UserBody.  # noqa: E501
        :rtype: bool
        """
        return self._prospective

    @prospective.setter
    def prospective(self, prospective):
        """Sets the prospective of this UserBody.


        :param prospective: The prospective of this UserBody.  # noqa: E501
        :type: bool
        """

        self._prospective = prospective

    @property
    def public_key(self):
        """Gets the public_key of this UserBody.  # noqa: E501


        :return: The public_key of this UserBody.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this UserBody.


        :param public_key: The public_key of this UserBody.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def previous_public_key(self):
        """Gets the previous_public_key of this UserBody.  # noqa: E501


        :return: The previous_public_key of this UserBody.  # noqa: E501
        :rtype: str
        """
        return self._previous_public_key

    @previous_public_key.setter
    def previous_public_key(self, previous_public_key):
        """Sets the previous_public_key of this UserBody.


        :param previous_public_key: The previous_public_key of this UserBody.  # noqa: E501
        :type: str
        """

        self._previous_public_key = previous_public_key

    @property
    def last_login(self):
        """Gets the last_login of this UserBody.  # noqa: E501

        Last login datetime  # noqa: E501

        :return: The last_login of this UserBody.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this UserBody.

        Last login datetime  # noqa: E501

        :param last_login: The last_login of this UserBody.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def first_login(self):
        """Gets the first_login of this UserBody.  # noqa: E501

        First login datetime  # noqa: E501

        :return: The first_login of this UserBody.  # noqa: E501
        :rtype: datetime
        """
        return self._first_login

    @first_login.setter
    def first_login(self, first_login):
        """Sets the first_login of this UserBody.

        First login datetime  # noqa: E501

        :param first_login: The first_login of this UserBody.  # noqa: E501
        :type: datetime
        """

        self._first_login = first_login

    @property
    def last_login_ip(self):
        """Gets the last_login_ip of this UserBody.  # noqa: E501


        :return: The last_login_ip of this UserBody.  # noqa: E501
        :rtype: OneOfstringstring
        """
        return self._last_login_ip

    @last_login_ip.setter
    def last_login_ip(self, last_login_ip):
        """Sets the last_login_ip of this UserBody.


        :param last_login_ip: The last_login_ip of this UserBody.  # noqa: E501
        :type: OneOfstringstring
        """

        self._last_login_ip = last_login_ip

    @property
    def created_at(self):
        """Gets the created_at of this UserBody.  # noqa: E501

        User creation datetime  # noqa: E501

        :return: The created_at of this UserBody.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserBody.

        User creation datetime  # noqa: E501

        :param created_at: The created_at of this UserBody.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this UserBody.  # noqa: E501

        User last update datetime  # noqa: E501

        :return: The updated_at of this UserBody.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserBody.

        User last update datetime  # noqa: E501

        :param updated_at: The updated_at of this UserBody.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
