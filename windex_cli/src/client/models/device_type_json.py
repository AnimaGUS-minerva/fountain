# coding: utf-8

"""
    CIRA SHG Windex API

    CIRALabs SecureHomeGateway Windex API: between smartphone and router  # noqa: E501

    OpenAPI spec version: 1.0.0-current
    Contact: securehomegateway@cira.ca
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeviceTypeJson(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'mud_url': 'str',
        'mud_url_sig': 'str',
        'validated_mud_json': 'object',
        'manufacturer_id': 'int',
        'failure_details': 'str',
        'mud_valid': 'bool',
        'id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'mud_url': 'mud_url',
        'mud_url_sig': 'mud_url_sig',
        'validated_mud_json': 'validated_mud_json',
        'manufacturer_id': 'manufacturer_id',
        'failure_details': 'failure_details',
        'mud_valid': 'mud_valid',
        'id': 'id'
    }

    def __init__(self, name=None, created_at=None, updated_at=None, mud_url=None, mud_url_sig=None, validated_mud_json=None, manufacturer_id=None, failure_details=None, mud_valid=None, id=None):  # noqa: E501
        """DeviceTypeJson - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._created_at = None
        self._updated_at = None
        self._mud_url = None
        self._mud_url_sig = None
        self._validated_mud_json = None
        self._manufacturer_id = None
        self._failure_details = None
        self._mud_valid = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if mud_url is not None:
            self.mud_url = mud_url
        if mud_url_sig is not None:
            self.mud_url_sig = mud_url_sig
        if validated_mud_json is not None:
            self.validated_mud_json = validated_mud_json
        if manufacturer_id is not None:
            self.manufacturer_id = manufacturer_id
        if failure_details is not None:
            self.failure_details = failure_details
        if mud_valid is not None:
            self.mud_valid = mud_valid
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this DeviceTypeJson.  # noqa: E501

        Name of the device type  # noqa: E501

        :return: The name of this DeviceTypeJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceTypeJson.

        Name of the device type  # noqa: E501

        :param name: The name of this DeviceTypeJson.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this DeviceTypeJson.  # noqa: E501

        Device type creation datetime  # noqa: E501

        :return: The created_at of this DeviceTypeJson.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeviceTypeJson.

        Device type creation datetime  # noqa: E501

        :param created_at: The created_at of this DeviceTypeJson.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DeviceTypeJson.  # noqa: E501

        Device type last update datetime  # noqa: E501

        :return: The updated_at of this DeviceTypeJson.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DeviceTypeJson.

        Device type last update datetime  # noqa: E501

        :param updated_at: The updated_at of this DeviceTypeJson.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def mud_url(self):
        """Gets the mud_url of this DeviceTypeJson.  # noqa: E501


        :return: The mud_url of this DeviceTypeJson.  # noqa: E501
        :rtype: str
        """
        return self._mud_url

    @mud_url.setter
    def mud_url(self, mud_url):
        """Sets the mud_url of this DeviceTypeJson.


        :param mud_url: The mud_url of this DeviceTypeJson.  # noqa: E501
        :type: str
        """

        self._mud_url = mud_url

    @property
    def mud_url_sig(self):
        """Gets the mud_url_sig of this DeviceTypeJson.  # noqa: E501


        :return: The mud_url_sig of this DeviceTypeJson.  # noqa: E501
        :rtype: str
        """
        return self._mud_url_sig

    @mud_url_sig.setter
    def mud_url_sig(self, mud_url_sig):
        """Sets the mud_url_sig of this DeviceTypeJson.


        :param mud_url_sig: The mud_url_sig of this DeviceTypeJson.  # noqa: E501
        :type: str
        """

        self._mud_url_sig = mud_url_sig

    @property
    def validated_mud_json(self):
        """Gets the validated_mud_json of this DeviceTypeJson.  # noqa: E501


        :return: The validated_mud_json of this DeviceTypeJson.  # noqa: E501
        :rtype: object
        """
        return self._validated_mud_json

    @validated_mud_json.setter
    def validated_mud_json(self, validated_mud_json):
        """Sets the validated_mud_json of this DeviceTypeJson.


        :param validated_mud_json: The validated_mud_json of this DeviceTypeJson.  # noqa: E501
        :type: object
        """

        self._validated_mud_json = validated_mud_json

    @property
    def manufacturer_id(self):
        """Gets the manufacturer_id of this DeviceTypeJson.  # noqa: E501


        :return: The manufacturer_id of this DeviceTypeJson.  # noqa: E501
        :rtype: int
        """
        return self._manufacturer_id

    @manufacturer_id.setter
    def manufacturer_id(self, manufacturer_id):
        """Sets the manufacturer_id of this DeviceTypeJson.


        :param manufacturer_id: The manufacturer_id of this DeviceTypeJson.  # noqa: E501
        :type: int
        """

        self._manufacturer_id = manufacturer_id

    @property
    def failure_details(self):
        """Gets the failure_details of this DeviceTypeJson.  # noqa: E501


        :return: The failure_details of this DeviceTypeJson.  # noqa: E501
        :rtype: str
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this DeviceTypeJson.


        :param failure_details: The failure_details of this DeviceTypeJson.  # noqa: E501
        :type: str
        """

        self._failure_details = failure_details

    @property
    def mud_valid(self):
        """Gets the mud_valid of this DeviceTypeJson.  # noqa: E501


        :return: The mud_valid of this DeviceTypeJson.  # noqa: E501
        :rtype: bool
        """
        return self._mud_valid

    @mud_valid.setter
    def mud_valid(self, mud_valid):
        """Sets the mud_valid of this DeviceTypeJson.


        :param mud_valid: The mud_valid of this DeviceTypeJson.  # noqa: E501
        :type: bool
        """

        self._mud_valid = mud_valid

    @property
    def id(self):
        """Gets the id of this DeviceTypeJson.  # noqa: E501


        :return: The id of this DeviceTypeJson.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceTypeJson.


        :param id: The id of this DeviceTypeJson.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceTypeJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
